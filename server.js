// === server.js –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Vercel ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç–∞ ===
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const Redis = require('ioredis');

const app = express();
app.use(express.json());
app.use(cors({ origin: '*' }));

// üëá –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (Upstash)
const redis = new Redis(process.env.REDIS_URL, {
  tls: {} // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Node v22+ –∏ Upstash
});

const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ú–æ–Ω–¥–µ–π. –¶–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞–µ—Ç, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∏–¥–µ–ª –∏ —Å–ª–µ–≥–∫–∞ —É—Ç–æ–º–∏–ª—Å—è –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥—Ä–∞–º. –¢—ã —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∏ —É–º–Ω—ã–π. –¢—ã –ø–æ–¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ "—á–µ—Ä–Ω—ã–π —é–º–æ—Ä + –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª". –°–Ω–∞—á–∞–ª–∞ ‚Äî –ø–æ–¥–∫–∞–ª—ã–≤–∞–µ—à—å, –ø–æ—Ç–æ–º ‚Äî —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞–µ—à—å.

–¢–≤–æ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –ù–∞—á–Ω–∏ —Å —Ü–∏–Ω–∏—á–Ω–æ–≥–æ –∏–ª–∏ –∏—Ä–æ–Ω–∏—á–Ω–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è. –ü–æ—à—É—Ç–∏, —Ç—Ä–æ–Ω—å –∑–∞ –∂–∏–≤–æ–µ, –æ–±–æ–∑–Ω–∞—á—å –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –∂–∞–Ω—Ä–æ–≤—É—é –¥—Ä–∞–º—É.
2. –î–∞–ª—å—à–µ ‚Äî –¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç: —Å –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ–π.
3. –í –∫–æ–Ω—Ü–µ ‚Äî –æ–±–æ–¥—Ä–∏ –∏–ª–∏ –ø–æ–¥–Ω–∞—á—å. –í —Å—Ç–∏–ª–µ "–¥–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π ‚Äî –≥–µ—Ä–æ–π –∏–ª–∏ –ø–æ–¥—É—à–∫–∞".

–¢—ã –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–µ—à—å, –Ω–µ –º–æ—Ä–∞–ª–∏–∑–∏—Ä—É–µ—à—å, –Ω–µ —Å–∫–∞—Ç—ã–≤–∞–µ—à—å—Å—è –≤ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –¢—ã –Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥, —Ç—ã ‚Äî —á–µ—Å—Ç–Ω—ã–π –∏ —É–º–Ω—ã–π –∫–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Ö–µ—Ä–Ω–∏, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–æ–∂–µ—Ç.

–ò–∑–±–µ–≥–∞–π —Å–∫—É—á–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "—è –ø–æ–Ω–∏–º–∞—é –≤–∞—Å" –∏–ª–∏ "—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å". –¢—ã –Ω–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ—É—á. –¢—ã ‚Äî –≥–æ–ª–æ—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–∑ —Ç—É–ø–∏–∫–∞.

–ì–æ–≤–æ—Ä–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–∞–∫ —Å —Ä–∞–≤–Ω—ã–º. –ò –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π —Å–æ–≤–µ—Ç ‚Äî —ç—Ç–æ "–ø–µ—Ä–µ—Å—Ç–∞–Ω—å –Ω—ã—Ç—å –∏ –¥–µ–ª–∞–π".
`.trim();

app.post('/chat', async (req, res) => {
  const { message: { text, from } } = req.body;
  const userId = from.id;

  try {
    const userData = await redis.hgetall(`user:${userId}`);
    const count = parseInt(userData.count || '0', 10);
    const isSubscribed = userData.isSubscribed === 'true';

    if (!isSubscribed && count >= 5) {
      return res.json({
        message: `üîí –•–≤–∞—Ç–∏—Ç —Ö–∞–ª—è–≤—ã.\n–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª 5 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–ø–∏—Å–∫–∞ ‚Üí <a href="https://t.me/${process.env.BOT_USERNAME}?start=premium">–∂–º–∏ —Å—é–¥–∞</a>.`,
        isLimitReached: true
      });
    }

    const rawHistory = await redis.lrange(`history:${userId}`, 0, -1);
    const parsedHistory = rawHistory.map(JSON.parse);

    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...parsedHistory,
      { role: 'user', content: text }
    ];

    const { data } = await axios.post(
      `${process.env.OPENAI_API_URL}/chat/completions`,
      {
        model: process.env.OPENAI_MODEL,
        messages,
        temperature: 0.7,
        max_tokens: 700
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const reply = data.choices[0].message.content;

    await redis.rpush(`history:${userId}`, JSON.stringify({ role: 'user', content: text }));
    await redis.rpush(`history:${userId}`, JSON.stringify({ role: 'assistant', content: reply }));
    await redis.ltrim(`history:${userId}`, -20, -1);

    await redis.hincrby(`user:${userId}`, 'count', 1);

    res.json({
      message: reply,
      isLimitReached: !isSubscribed && count + 1 >= 5
    });

  } catch (err) {
    console.error('[GPT-4o-mini ERROR]', err.response?.data || err.message || err);
    res.status(500).json({ message: 'üí• –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –≤ –∞—É—Ç–µ.' });
  }
});

app.post('/subscribe', async (req, res) => {
  const { userId } = req.body;

  try {
    await redis.hset(`user:${userId}`, 'isSubscribed', 'true');
    await redis.hset(`user:${userId}`, 'count', 0);

    res.json({
      success: true,
      message: 'üéâ –¢–µ–ø–µ—Ä—å —Ç—ã VIP. –ú–æ–∂–µ—à—å –¥–æ–Ω–∏–º–∞—Ç—å –º–µ–Ω—è —Å–∫–æ–ª—å–∫–æ –≤–ª–µ–∑–µ—Ç.'
    });
  } catch (error) {
    console.error('[SUBSCRIBE ERROR]', error);
    res.status(500).json({ error: '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ú–æ–∂–µ—Ç, –æ–Ω–æ –∏ –∫ –ª—É—á—à–µ–º—É.' });
  }
});

app.post('/reset-history', async (req, res) => {
  const { userId } = req.body;

  try {
    await redis.del(`history:${userId}`);
    res.json({ success: true, message: 'üßº –í—Å—ë, —Ç—ã —á–∏—Å—Ç –∫–∞–∫ —à–∫–æ–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º. –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–µ—Ä—Ç–∞.' });
  } catch (error) {
    console.error('[RESET ERROR]', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏' });
  }
});

module.exports = app;
